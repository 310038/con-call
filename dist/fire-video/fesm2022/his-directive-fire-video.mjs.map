{"version":3,"file":"his-directive-fire-video.mjs","sources":["../../../fire-video/src/lib/show.ts","../../../fire-video/src/lib/screenshot.service.ts","../../../fire-video/src/lib/firebase.service.ts","../../../fire-video/src/lib/ice-candidate.service.ts","../../../fire-video/src/lib/ice-server.ts","../../../fire-video/src/lib/connection.service.ts","../../../fire-video/src/lib/media.service.ts","../../../fire-video/src/lib/fire-video.component.ts","../../../fire-video/src/lib/fire-video.component.html","../../../fire-video/src/public-api.ts","../../../fire-video/src/his-directive-fire-video.ts"],"sourcesContent":["export class Show {\n\n  isDialog = false;\n  isCreateDisabled = false;\n  isMicDisabled = true;\n  isJoinDisabled = false;\n  isHangupDisabled = false;\n  isCameraDisabled = false;\n  isCaller = false;\n  isCallee = false;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Injectable, ElementRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenshotService {\n  constructor(private http: HttpClient) { }\n\n  // 截圖上傳到 CDN 的圖檔URL陣列\n  imageUrlSubject = new BehaviorSubject<string[]>(['', '', '']);\n\n  // 計算有幾張截圖已產生，以利截圖檔案的命名\n  fileCounter = 1;\n\n  /** 截圖並上傳 CDN\n   * @param folderName 指定要上傳到 CDN 的哪一個檔案夾\n   * @param video 指定對哪一個 HTMLVideoElement 截圖\n   */\n  async screenshot(folderName: string, video: ElementRef<HTMLVideoElement>) {\n\n    const width = video.nativeElement.videoWidth;\n    const height = video.nativeElement.videoHeight;\n\n    const canvas = document.createElement('canvas');\n\n    canvas.width = width;\n    canvas.height = height;\n\n    const context = canvas.getContext('2d');\n\n    context?.drawImage(video.nativeElement, 0, 0, width, height);\n\n    canvas.toBlob(async (blob) => {\n\n      const fileName = `image${this.fileCounter++}.jpeg`;\n\n      await this.uploadToCDN(folderName, blob, fileName);\n    }, 'image/jpeg');\n\n  }\n\n  /** 取得 imageUrlSubject。\n   * @returns Promise<Observable<string[]>>\n   */\n  async getScreenshotUrl(): Promise<Observable<string[]>> {\n    return this.imageUrlSubject.asObservable();\n  }\n\n  /** 將新的截圖檔案的 url 更新到 imageUrlSubject 中，並使用rxjs 的 next() 告知所有有訂閱 imageUrlSubject 的人\n   * @param newImageUrl\n   */\n  async updateImageURIs(newImageUrl: string) {\n    const currentSubject = this.imageUrlSubject.value;\n\n    const updatedURIs = [newImageUrl, ...currentSubject,];\n    this.imageUrlSubject.next(updatedURIs);\n  }\n\n  /** 將檔案上傳到 CDN\n   */\n  async uploadToCDN(folderName: string, file: any, fileName: string) {\n\n    const formData = new FormData();\n    formData.append(`${folderName}/${fileName}`, file);\n\n    return new Promise((resolve, reject) => {\n      this.http.post('https://his.hepiuscare.com.tw/resources/hpc/upload', formData).subscribe(\n          (response) => {\n            this.updateImageURIs(response.toString());\n            resolve(response);\n          },\n          (error) => {\n            reject(error);\n          }\n      );\n    });\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { AngularFirestore, CollectionReference, DocumentReference, DocumentSnapshot } from '@angular/fire/compat/firestore';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FirebaseService {\n  fireStore: AngularFirestore = inject(AngularFirestore);\n\n\n  /** 在fireStore中創建一個集合(collection)，此集合名稱為由參數collectionName決定(預設為rooms)\n   * 這個collection裡會有很多documents\n   * 預設為:創建一個名為'rooms'的collection，這個collection裡會有很多房間，不同房間以不同房間號碼(roomId)區分\n   * @param collectionName collection名稱，預設collectionName 叫做 rooms\n   */\n  addCollection(collectionName: string) {\n    this.fireStore.collection(collectionName);\n  }\n\n  /** 獲取特定 collectionName 的 CollectionReference\n   * @param collectionName collection名稱，預設collectionName 叫做 rooms\n   */\n  getCollectionRef(collectionName: string) {\n    const collectionRef = this.fireStore.collection(collectionName);\n    return collectionRef;\n  }\n\n  /** 在fireStore中的'rooms'(collection)中創建一個以參數'roomId'為名稱的文件(doc)，並把data寫進去這個文件(doc)中\n   * 取得指定房間的document(roomDoc) ，並使用 firestore(原生）的 set() 方法，將data寫進這個文件(doc)中\n   * @param collectionName collection名稱，預設collectionName 叫做 rooms\n   * @param roomId 要創建的文件(doc)的名稱，預設為病人身份證字號\n   * @param data 要寫進這個文件(doc)中的資料\n   */\n  addDataToDoc(collectionName: string, roomId: string, data: object): void {\n\n    // 取得指定房間的document(roomDoc)\n    const roomCollection = this.getCollectionRef(collectionName);\n    const roomDoc = roomCollection.doc(roomId);\n\n    roomDoc.set(data);\n  }\n\n  /** 更新指定房間的 document 資料\n   * 取得指定房間的document(roomDoc) ，並使用 firestore(原生）的 update() 方法，將 data 更新到這個文件(doc)中\n   * @param collectionName collection名稱，預設collectionName 叫做 rooms\n   * @param roomId 文件(doc)的名稱，預設為病人身份證字號\n   * @param data 要更新到這個文件(doc)中的資料\n   */\n  updateDataToDoc(collectionName: string, roomId: string, data: object) {\n\n    // 取得指定房間的document(roomDoc)\n    const roomCollection = this.getCollectionRef(collectionName);\n    const roomDoc = roomCollection.doc(roomId);\n\n    roomDoc.update(data);\n  }\n\n  /** 獲取指定 collectionName 中的指定的文件(Document)的Reference\n   * @param collectionName collection名稱，預設collectionName 叫做 rooms\n   * @param roomId 文件(doc)的名稱，預設為病人身份證字號\n   */\n  getDocRef(collectionName: string, roomId: string): DocumentReference<unknown> {\n\n    // 取得指定房間的文件參考 DocumentReference(docRef)\n    const roomCollection = this.getCollectionRef(collectionName);\n    const docRef = roomCollection.doc(roomId).ref;\n\n    return docRef;\n  }\n\n  /** 在指定的文件(document)中創建一個名為 'subCollectionName' 的子集合(subCollection)，並把data寫進去這個子集合(subCollection)中\n   * 例如：在'rooms'(collection)中某一個roomId的文件(doc)中創建一個名為callerCandidates的子集合(subCollection)\n   * 創建subCollection後，利用subCollectionRef 並搭配 firestore(原生）的 add() 方法，將data寫進這個文件(doc)中\n   * @param docRef 欲創建 subCollection 的文件(document)的Reference\n   * @param subCollectionName 欲創建的子集合(subCollection)的名稱\n   * @param data 要寫進這個子集合(subCollection)中的資料\n   */\n  addSubCollection(docRef: DocumentReference<unknown>, subCollectionName: string, data: object): void {\n\n    const subCollectionRef = docRef.collection(subCollectionName);\n\n    subCollectionRef.add({ ...data });\n  }\n\n  /** 獲取指定文件參考(docRef)中的特定子集合(subCollection)的 Reference，也就是獲取子集合(subCollection) 的 CollectionReference）\n   * 例如:獲取名為 callerCandidates 這個子集合(subCollection) 的 Reference\n   * @param docRef 該 subCollection 所在的文件(document) 的 Reference\n   * @param subCollectionName 欲獲取的子集合(subCollection)的名稱\n   */\n  getSubCollectionRef(docRef: DocumentReference<unknown>, subCollectionName: string): CollectionReference<unknown> {\n    return docRef.collection(subCollectionName);\n  }\n\n  /** 獲取特定文件參考(docRef)的 snapshot\n   * snapshot 是firestore提供的 api，透過snapshot可以'即時'獲取到該文件的資料變化，例如新增、修改、刪除等。\n   * @param DocRef 欲操作的文件(document) 的 Reference\n   */\n  getSnapshot(DocRef: DocumentReference<unknown>): Promise<DocumentSnapshot<unknown>> {\n    return DocRef.get() as Promise<DocumentSnapshot<unknown>>;\n  }\n}\n","import { FirebaseService } from './firebase.service';\nimport { Injectable, inject } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IceCandidateService {\n  fireBaseService: FirebaseService = inject(FirebaseService);\n\n  /** 收集local，並監聽remote 的 ice candidates ， 且將收集到的 ice candidates 寫入firestore中指定的subCollection(caller或callee)中以利進行交換。\n   * 由於要建立點對點連接前，需要先收集 ICE 找到最適合的連線方式再交換 SPD 資訊，因此這個function用來收集 ICE Candidates。\n   * 透過 addSubCollection() 創建 caller/callee 各自的subCollection，並將 ice candidates 寫入各自的 subCollection 中，\n   * 同時，監聽另一方的 subCollection ，當收到對方的 ice candidates 時，將其轉換為 RTCIceCandidate 對象，然後添加到 此端的 RTCPeerConnection 中\n   * @param roomId\n   * @param peerConnection\n   * @param localSubCollectionName\n   * @param remoteSubCollectionName\n   */\n  async collectIceCandidates(roomId: string, peerConnection: RTCPeerConnection, localSubCollectionName: string, remoteSubCollectionName: string) {\n    const roomDocRef = this.fireBaseService.getDocRef('rooms', roomId);\n\n    try {\n      // 當local端收集到一個 ICE Candidates時，將觸發這個事件\n      peerConnection.onicecandidate = async (event) => {\n        // 如果事件中存在 ICE Candidates，則將其轉換為 JSON Object 並添加到 localSubCollectionName 這個 SubCollection 中\n        if (event.candidate) {\n          // 存儲 local 的 ICE 候選者\n          this.fireBaseService.addSubCollection(\n              roomDocRef,\n              localSubCollectionName,\n              event.candidate.toJSON()\n          );\n        }\n      };\n\n      // 收集到一個 ICE Candidates時錯誤則觸發\n      peerConnection.onicecandidateerror = (error) => {\n        console.error(error);\n      };\n\n      // 利用 onSnapshot() 監聽 remote端(remoteSubCollectionName的collection) ， 當有 docChange 時，獲取的 ICE candidates 數據轉換為 RTCIceCandidate 對象，然後添加此端的到 RTCPeerConnection 中\n      const remoteCandidatesCollection = roomDocRef.collection(\n          remoteSubCollectionName\n      );\n      remoteCandidatesCollection.onSnapshot((snapshot) => {\n        snapshot.docChanges().forEach(async (change) => {\n          if (change.type === 'added') {\n            // 將每個新增的remote ICE Candidates 轉換為 RTCIceCandidate，並添加到 此RTCPeerConnection 中\n            const data = change.doc.data();\n            await peerConnection.addIceCandidate(new RTCIceCandidate(data));\n          }\n        });\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n","/** iceServers的配置\n   * 是一個用於設定 WebRTC ICE server 的陣列。這個陣列包括 STUN 和 TURN 伺服器的資訊，這邊只使用 google 提供免費的 STUN server 。\n   *\n   * WebRTC 使用 STUN 和 TURN 協議來克服 NAT 和防火牆的障礙，確保兩個瀏覽器之間的實時通信順利進行。\n   * STUN（Session Traversal Utilities for NAT）用於獲取公共IP地址和端口。\n   * STUN伺服器的工作是從訊息中找出這個裝置的外部位置，然後把這個資訊送回給該裝置，告訴裝置如何穿越 NAT以確定裝置的可用 IP 地址\n   * TURN（Traversal Using Relays around NAT）提供中繼服務，允許通信，即使在複雜的NAT環境中也能運作。\n   * WebRTC使用STUN和TURN協議來確保實時通信的成功。\n   * 當瀏覽器無法直接建立對等連接時，它們將使用 STUN 來獲取公共 IP 地址，並嘗試直接通信。\n   * 如果 STUN 無法成功且有設定 TURN server的情況下，則會使用 TURN 服務器作為中繼，將數據傳遞給對方。\n   */\nexport const iceSeverConfig = {\n  iceServers: [\n    {\n      urls: [\n        'stun:stun1.l.google.com:19302',\n        'stun:stun2.l.google.com:19302',\n      ],\n    },\n  ],\n  // ICE 協商過程中生成的 ICE 候選人的數量。根據應用程序的需求和性能考慮來配置。較大可能會增加成功建立連接的機會，但也會增加網絡流量和運算成本。\n  iceCandidatePoolSize: 10,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Injectable, inject } from '@angular/core';\nimport { FirebaseService } from './firebase.service';\nimport { DocumentReference } from '@angular/fire/compat/firestore';\nimport { iceSeverConfig } from './ice-server';\nimport { Sdp } from './sdp.interface';\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConnectionService {\n  fireBaseService: FirebaseService = inject(FirebaseService);\n\n  /** 創建並獲取RTCPeerConnection物件\n   * RTCPeerConnection是負責建立瀏覽器(peer)與瀏覽器(peer)連接之間的工具。\n   * 每一端(peer)都要創建自己的RTCPeerConnection物件，並且透過這個物件來建立連接。\n   * 這種對等連接是點對點(peer-2-peer)的，不需要通過中間伺服器，但他在剛開始連接時需要一個 Signaing Server 作為資料交換的據點而在交換並連線後即不需要再透過 Server 交換資料\n   * peer-2-peer 的連接該如何交換資訊之到彼此的 IP 位置、媒體內容就需要使用 SDP 協定傳輸相關的資訊\n   * SDP 協定發送多媒體參數包含地址、多媒體類型、傳輸協議，也就是後面會實作的createOffer()、createAnswer()\n   */\n  genConnection(): RTCPeerConnection {\n    return new RTCPeerConnection(iceSeverConfig);\n  }\n\n  /** 將MediaStreamTrack(多媒體資訊，例如影像、語音）加入該 peer 的 RTCPeerConnection\n   * @param track\n   * @param stream\n   */\n  addTrack(peerConnection: RTCPeerConnection, track: MediaStreamTrack, stream: MediaStream): void {\n    peerConnection.addTrack(track, stream);\n  }\n\n  /** 設置Caller端的SDP，Caller端建立offer，並監聽answer。\n   * 設置Caller端的description(用以交換多媒體相關的資訊，例如解析度與 codec，以及連線資訊等)並放在 firestore 中交換\n   * 透過RTCPeerConnection 的 createOffer() ，創建 Caller端 的 session description，\n   * 建立成功後，透過setLocalDescription() 將 offer 設置為 local description，並透過 Signaling channel(fireStore) 傳遞給 callee端。\n   * 同時，監聽 firestore 中的此房間文件(roomDocRef)是否有收到callee端傳來的answer，當收到answer時，透過setRemoteDescription()將 answer 設置為 remote description。\n   * @param peerConnection\n   * @param roomId\n   */\n  async setLocalPeer(peerConnection: RTCPeerConnection, roomId: string, remoteStream: MediaStream) {\n    // 1. 建立 offer ， 並把此offer設置在Local description。\n    const offer = await peerConnection.createOffer();\n\n    // 將offer中的type與sdp擷取出來，以利寫到firestore中\n    const roomWithOffer: object = {\n      offer: {\n        type: offer.type,\n        sdp: offer.sdp,\n      },\n    };\n\n    // 2. offer 設定 setLocalDescription，並把roomWithOffer寫進 firestore 中以利交換\n    await peerConnection.setLocalDescription(offer);\n    this.fireBaseService.addDataToDoc('rooms', roomId, roomWithOffer);\n\n    // 7. 利用 onSnapshot() 監聽 answer\n    const roomDocRef = this.fireBaseService.getDocRef('rooms', roomId);\n    roomDocRef.onSnapshot(async (snapshot) => {\n      const data = snapshot.data() as Sdp;\n\n      // 8. 如果有監聽到 answer ，就把 answer 設定給 RemoteDescription\n      if (!peerConnection.currentRemoteDescription && data && data.answer) {\n        const rtcSessionDescription = new RTCSessionDescription(data.answer);\n        await peerConnection.setRemoteDescription(rtcSessionDescription);\n      }\n    });\n\n    /* 當 WebRTC 的連接通道（Peer Connection）接收到新的媒體流時，會觸發 RTCPeerConnection.ontrack 事件\n      event.streams[0] 是事件中的一個屬性，它表示收到的媒體流中的第一個流（通常是視訊或音訊流）\n      使用 remoteStream.addTrack(track) 將這個軌道添加到 remoteStream 中。\n      這意味著將接收到的媒體軌道添加到一個媒體流中\n     */\n    peerConnection.ontrack = (event) => {\n      event.streams[0].getTracks().forEach((track) => {\n        remoteStream.addTrack(track);\n      });\n    };\n  }\n\n  /** 設置Callee端的SDP，Callee端拿取Caller端的offer，並建立answer放到firestore中，以利Caller端取得。\n   * 設置Callee的description(用以交換多媒體相關的資訊，例如解析度與 codec，以及連線資訊等)並放在 firestore 中交換\n   * 先去fireStore中尋找 Caller端創建 的 offer，並透過setRemoteDescription() 將 此offer 設置為 remote description，\n   * 同時，建立 answer，並透過setLocalDescription() 將 answer 設置為 local description，\n   * 並將此 answer 放到 Signaling channel(fireStore) ，以利Caller端監聽並收到此 answer 。\n   * @param peerConnection\n   * @param roomId\n   */\n  async setRemotePeer(peerConnection: RTCPeerConnection, roomId: string, remoteStream: MediaStream) {\n    /* 當 WebRTC 的連接通道（Peer Connection）接收到新的媒體流時，會觸發 RTCPeerConnection.ontrack 事件\n      event.streams[0] 是事件中的一個屬性，它表示收到的媒體流中的第一個流（通常是視訊或音訊流）\n      使用 remoteStream.addTrack(track) 將這個軌道添加到 remoteStream 中。\n      這意味著將接收到的媒體軌道添加到一個媒體流中\n     */\n    peerConnection.ontrack = (event) => {\n      event.streams[0].getTracks().forEach((track) => {\n        remoteStream.addTrack(track);\n      });\n    };\n\n    const roomDocRef: DocumentReference<unknown> =\n      this.fireBaseService.getDocRef('rooms', `${roomId}`);\n\n    const roomSnapshot: any = await roomDocRef.get();\n\n    // 3. 尋找 db 中的 offer\n    const offer = roomSnapshot.data()?.offer;\n\n    // 4. offer 設定 RemoteDescription\n    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n\n    // 5. 建立 Answer\n    const answer = await peerConnection.createAnswer();\n    await peerConnection.setLocalDescription(answer);\n\n    const roomWithAnswer: object = {\n      answer: {\n        type: answer.type,\n        sdp: answer.sdp,\n      },\n    };\n\n    // 6. Answer 設定 LocalDescription，放在 指定的roomDoc 中以利 Caller 端取得\n    this.fireBaseService.updateDataToDoc('rooms', roomId, roomWithAnswer);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class MediaService {\n  /** 獲取 user 的鏡頭跟麥克風裝置\n   * @returns {Promise<MediaStream>}\n   */\n  async getUserMedia(): Promise<MediaStream> {\n\n    return navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true,\n    });\n  }\n  disableVideo(stream: MediaStream): void {\n    stream.getVideoTracks()[0].enabled = false;\n  }\n  enableVideo(stream: MediaStream): void {\n    stream.getVideoTracks()[0].enabled = true;\n  }\n\n  enableMic(stream: MediaStream): void {\n    stream.getAudioTracks()[0].enabled = true;\n  }\n  disableMic(stream:MediaStream):void{\n    stream.getAudioTracks()[0].enabled = false;\n  }\n\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { MessagesModule } from 'primeng/messages';\nimport { Show } from './show';\nimport { Component, ViewChild, inject, ElementRef, Input, OnInit, } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from 'primeng/button';\nimport { DialogModule } from 'primeng/dialog';\nimport { FormsModule } from '@angular/forms';\nimport { ToastModule } from 'primeng/toast';\nimport { ScreenshotService } from './screenshot.service';\nimport { IceCandidateService } from './ice-candidate.service';\nimport { ConnectionService } from './connection.service';\nimport { FirebaseService } from './firebase.service';\nimport { MediaService } from './media.service';\nimport { DocumentReference } from '@angular/fire/compat/firestore';\nimport { MessageService } from 'primeng/api';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { GalleriaModule } from 'primeng/galleria';\nimport { Observable } from 'rxjs';\nimport { DividerModule } from 'primeng/divider';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nconst primeModule = [DividerModule, ButtonModule, DialogModule, ToastModule, MessagesModule, GalleriaModule, ProgressSpinnerModule];\n@Component({\n  selector: 'his-fire-video',\n  standalone: true,\n  imports: [CommonModule, DialogModule, FormsModule, TranslateModule, primeModule],\n  templateUrl: './fire-video.component.html',\n  styleUrls: ['./fire-video.component.scss'],\n  providers: [MessageService]\n})\nexport class FireVideoComponent implements OnInit {\n\n  /** 取得欲創建房間的號碼（預設應該要是病人身分證字號）\n   * 使用此專案的程式需傳送欲創建房間的號碼至此，以便使用該號碼建立房間\n   */\n  @Input() roomId!: string;\n\n  @ViewChild('remoteVideo') remoteVideo!: ElementRef<HTMLVideoElement>;\n\n  localStream!: MediaStream;\n  remoteStream!: MediaStream;\n  CallerPeerConnection!: RTCPeerConnection;\n  CalleePeerConnection!: RTCPeerConnection;\n  inputRoomId!: string;\n  videoIcon = 'videoCam';\n  micIcon = \"Mic\";\n  contactsIcon = \"Contacts\"\n  imageURIs!: Observable<string[] | any>;\n\n  ngOnInit() {\n    this.openUserMedia();\n  }\n\n  // 定義在不同螢幕大小或設備上顯示圖片輪播時的配置選項\n  galleriaResponsiveOptions: any[] = [\n    {\n      breakpoint: '1024px',\n      numVisible: 5\n    },\n    {\n      breakpoint: '960px',\n      numVisible: 4\n    },\n    {\n      breakpoint: '768px',\n      numVisible: 3\n    },\n    {\n      breakpoint: '560px',\n      numVisible: 1\n    }\n  ];\n\n  show = new Show();\n\n  fireBaseService: FirebaseService = inject(FirebaseService);\n  iceCandidateService: IceCandidateService = inject(IceCandidateService);\n  screenshotService: ScreenshotService = inject(ScreenshotService);\n  peerConnectionService: ConnectionService = inject(ConnectionService);\n  mediaService: MediaService = inject(MediaService);\n\n  /** 監聽截圖按鈕，當此按鈕被點擊時，呼叫 screenshot()，將對方視訊畫面截圖，並上傳至 CDN\n   */\n  onShootClick() {\n    this.screenshotService.screenshot(this.roomId, this.remoteVideo);\n  }\n\n  /** 切換「鏡頭」開關\n   */\n  disableCamera() {\n    // 依照isCameraDisabled 的 true/false ， 來切換icon 的 on/off 狀態\n    this.show.isCameraDisabled = !this.show.isCameraDisabled;\n    this.videoIcon = this.show.isCameraDisabled ? 'videocam_off' : 'videocam';\n\n    this.show.isCameraDisabled ? this.mediaService.disableVideo(this.localStream) : this.mediaService.enableVideo(this.localStream);\n  }\n\n  /** 切換「麥克風」開關\n   */\n  disableMic() {\n    // 依照isMicDisabled 的 true/false ， 來切換icon 的 on/off 狀態\n    this.show.isMicDisabled = !this.show.isMicDisabled;\n    this.micIcon = this.show.isMicDisabled ? 'mic_off' : 'Mic';\n\n    this.show.isMicDisabled ? this.mediaService.disableMic(this.localStream) : this.mediaService.enableMic(this.localStream);\n  }\n\n  /** 創建房間\n   * 在firebase中創建一個房間，此房間以房間號碼作識別，房間號碼(roomId)預其為病人身分證字號\n   * 0.檢查使用者是否已經開啟視訊及麥克風，若否，則跳出警告視窗\n   * 當此按鈕被按下後，會執行以下動作：\n   * 1.創建一個名為rooms的collection，這個collection裡會有很多房間，不同房間以不同房間號碼(roomId)區分\n   * 2.創建一個CallerPeerConnection\n   * 3.收集local(caller)的 ice candidates，同時監聽remote(callee) 的 ice candidates ， 並寫入firestore中指定的subCollection(caller或callee)中以利進行交換。\n   * 4.將localStream加入CallerPeerConnection，以利後續傳送給callee，callee接收到後就可以顯示在remoteVideo上(display the local media data.)\n   * 5.設置Caller端的SDP，Caller端建立offer，並監聽answer。\n   */\n  async createRoom() {\n    // 0.檢查使用者是否已經開啟視訊及麥克風，若否，則跳出警告視窗\n    if (!this.localStream) {\n      // this.toastMessageService.warning('請先開啟視訊及麥克風');\n      return;\n    }\n\n    // 1.創建一個名為rooms的collection，這個collection裡會有很多房間，不同房間以不同房間號碼(roomId)區分\n    this.fireBaseService.addCollection('rooms');\n\n    // 2.創建一個CallerPeerConnection\n    this.CallerPeerConnection = this.peerConnectionService.genConnection();\n\n    // 3.收集local(caller)，並監聽remote(callee) 的 ice candidates ， 並寫入firestore中指定的subCollection(caller或callee)中以利進行交換。\n    this.iceCandidateService.collectIceCandidates(this.roomId, this.CallerPeerConnection, 'callerCandidates', 'calleeCandidates');\n\n    console.log(this.roomId);\n\n    // 4.在建立RTCPeerConnection物件後，將localStream加入CallerPeerConnection，以利後續傳送給callee，callee接收到後就可以顯示在remoteVideo上(display the local media data.)\n    this.addLocalMediaTracks(this.CallerPeerConnection);\n\n    // 5.設置Caller端的SDP，Caller端建立offer，並監聽answer。\n    this.peerConnectionService.setLocalPeer(this.CallerPeerConnection, this.roomId, this.remoteStream);\n\n  }\n\n  /** 按下「加入視訊」按鈕後，會執行以下動作：\n   * 0.檢查使用者是否已經開啟視訊及麥克風，若否，則跳出警告視窗\n   * 當此按鈕被按下後，會執行以下動作：\n   * 1.彈出「加入視訊」對話框(讓user可以輸入指定的房間號碼，按下「確認」按鈕，就可以加入指定的房間。)\n   * @todo showDialog() 顯示「加入視訊」對話框，讓user可以輸入指定的房間號碼，按下「確認」按鈕，就可以加入指定的房間。\n   */\n  joinRoom() {\n    // 0.檢查使用者是否已經開啟視訊及麥克風，若否，則跳出警告視窗\n    if (!this.localStream) {\n      // this.toastMessageService.warning('請先開啟視訊及麥克風');\n      return;\n    }\n\n    // 1. 彈出「加入視訊」對話框(讓user可以輸入指定的房間號碼，按下「確認」按鈕，就可以加入指定的房間。)\n    this.showDialog();\n  }\n\n  /** 彈出「加入視訊」對話框後，user可以輸入房間號碼(病人身分證字號)，按下「確認」按鈕，就可以加入指定的房間。\n   * 透過房間號碼(病人身分證字號)加入房間\n   * 使用者可以透過輸入指定的房間號碼(病人身分證字號)來加入房間\n   * @param roomId 房間號碼(病人身分證字號)\n   * @todo joinRoomById()透過房間號碼(病人身分證字號)加入房間\n   */\n  async confirmJoinRoom() {\n\n    this.inputRoomId = this.roomId; //記得刪掉\n\n    this.joinRoomById(this.inputRoomId);\n    this.hideDialog();\n  }\n\n  /** 根據user所輸入的roomId來加入指定視訊房間\n   * 1. 取得user輸入的房間號碼(roomId)的房間的DocumentReference\n   * 2. 獲取 roomDocRef 的 snapshot，並判斷使用者所輸入的房間(號碼)是否存在，如果不存在，則跳出警告視窗\n   * 如果存在，則執行以下動作：\n   * 1. 創建一個CalleePeerConnection\n   * 2. 收集local(callee)，並監聽remote(caller) 的 ice candidates ， 並寫入firestore中指定的 subCollection(caller或callee)中以利進行交換。\n   * 3. 將localStream加入CalleePeerConnection，以利後續傳送給caller，caller接收到後就可以顯示在remoteVideo上(display the local media data.)\n   * 4. 設置Callee端的SDP，Callee端 取得offer並設置RemoteDescription ，然後建立answer， 將answer設置成LocalDescription，並將此 answer 寫到指定的roomDoc以利 Caller 端取得\n   * @param inputRoomId 房間號碼(病人身分證字號)\n   */\n  async joinRoomById(inputRoomId: string) {\n    // 1.取得user輸入的房間號碼(roomId)的房間的DocumentReference\n    const roomDocRef: DocumentReference<unknown> =\n      this.fireBaseService.getDocRef('rooms', `${inputRoomId}`);\n\n    // 2. 獲取 roomDocRef 的 snapshot，並判斷使用者所輸入的房間(號碼)是否存在，如果不存在，則跳出警告視窗\n    const roomSnapshot: any = await this.fireBaseService.getSnapshot(roomDocRef);\n\n    if (!roomSnapshot.exists) {\n      // this.toastMessageService.error('房間不存在');\n      return;\n    }\n\n    // 如果存在，則執行以下動作：\n    else {\n      // 1. 創建一個CalleePeerConnection\n      this.CalleePeerConnection = this.peerConnectionService.genConnection();\n\n      // 2. 收集local(callee)，並監聽remote(caller) 的 ice candidates ， 並寫入firestore中指定的subCollection(caller或callee)中以利進行交換。\n      this.iceCandidateService.collectIceCandidates(inputRoomId, this.CalleePeerConnection, 'calleeCandidates', 'callerCandidates');\n\n      // 3.在建立RTCPeerConnection物件後並將localStream加入CalleePeerConnection，以利後續傳送給caller，caller接收到後就可以顯示在remoteVideo上(display the local media data.)\n      this.addLocalMediaTracks(this.CalleePeerConnection);\n\n      // 4. 設置Callee端的SDP，Callee端 到fireStore中拿取 offer(由caller所建立的)後，建立answer，並將此 answer 寫到指定的roomDoc以利 Caller 端取得\n      this.peerConnectionService.setRemotePeer(this.CalleePeerConnection, inputRoomId, this.remoteStream);\n\n    }\n  }\n\n  /** 開啟視訊\n   */\n  async openUserMedia() {\n    const stream = await this.mediaService.getUserMedia();\n\n    this.localStream = stream;\n    this.remoteStream = new MediaStream();\n\n    this.createRoom();\n  }\n\n  /** 掛斷視訊通話\n   * 關閉視訊和音訊，並關閉連線雙方的peerConnection。\n   * 關閉視訊通話後，將會刪除fireStore中的房間文件\n   */\n  async hangUp() {\n    // 停止本地流和遠端流中的所有媒體軌道\n    await this.stopMediaTracks();\n\n    // 關閉 RTCPeerConnection\n    this.removePeerConnections();\n\n    // this.toastMessageService.info('通話已結束');\n\n    // 刪除 calleeCandidates 集合中的文件\n    await this.executeFirebaseCleanup();\n\n    // 重置畫面元件\n    this.initElements();\n\n    // 刷新頁面\n    this.reloadPage();\n  }\n\n  /** 顯示「加入視訊」對話框\n   */\n  showDialog(): void {\n    this.show.isDialog = true;\n  }\n\n  /** 關閉「加入視訊」對話框\n   */\n  hideDialog(): void {\n    this.show.isDialog = false;\n  }\n\n  /** 停止 localStream 和 remoteStream 中的所有媒體軌道\n   */\n  async stopMediaTracks(): Promise<void> {\n    this.localStream.getTracks().forEach((track) => {\n      track.stop();\n    });\n\n    if (this.remoteStream) {\n      this.remoteStream.getTracks().forEach((track) => track.stop());\n    }\n  }\n\n  /** 關閉連線雙方(caller 跟 callee)的peerConnection\n   */\n  removePeerConnections(): void {\n    if (this.CallerPeerConnection) {\n      this.CallerPeerConnection.close();\n    }\n\n    if (this.CalleePeerConnection) {\n      this.CalleePeerConnection.close();\n    }\n  }\n\n  /** 清除firestore中的房間文件\n   */\n  async executeFirebaseCleanup(): Promise<void> {\n    if (this.roomId) {\n      const roomDocRef = this.fireBaseService.getDocRef('rooms', this.roomId);\n\n      const calleeCandidatesRef = this.fireBaseService.getSubCollectionRef(roomDocRef, 'calleeCandidates');\n      calleeCandidatesRef.onSnapshot((snapshot: any) => {\n        console.log(snapshot);\n\n        snapshot.ref.delete();\n      });\n\n      const callerCandidatesRef = this.fireBaseService.getSubCollectionRef(roomDocRef, 'callerCandidates');\n      callerCandidatesRef.onSnapshot((snapshot: any) => {\n        snapshot.ref.delete();\n      });\n\n      await roomDocRef.delete();\n    }\n  }\n  /** 重新載入頁面\n   */\n  reloadPage(): void {\n    document.location.reload();\n  }\n\n  /** 初始化頁面元件，包含localStream、remoteStream、roomName\n   * 將頁面初始化，包含localStream、remoteStream、roomName\n   */\n  initElements() {\n    this.localStream = new MediaStream();\n\n    this.remoteStream = new MediaStream();\n  }\n\n  /** 在建立RTCPeerConnection物件後，將localStream加入PeerConnection，以利後續傳送給另一端，另一端接收到後就可以顯示在remoteVideo上(display the local media data.)\n   * 在localStream建立完後(也就是openUserMedia()執行完後)，才能執行下面這行。使用 getTracks() 方法獲取所有mediaTrack軌道，並將這些mediaTrack軌道添加到 RTCPeerConnection 中。\n   * getTracks 獲取媒體流所有軌道並返回 array\n   * addTracks 將新的音訊或視訊軌道添加到現有的媒體流中\n   * @param PeerConnection：RTCPeerConnection\n   */\n  addLocalMediaTracks(PeerConnection: RTCPeerConnection): void {\n    this.localStream.getTracks().forEach((track) => {\n\n      PeerConnection.addTrack(track, this.localStream);\n\n    });\n  }\n\n}\n","<!-- eslint-disable @angular-eslint/template/alt-text -->\n<div class=\"container\">\n  <div class=\"top\">\n    <div class=\"leftSide\">\n      <div *ngIf=\"!remoteStream\" class=\"material-symbols-outlined contactsIcon\">\n        {{contactsIcon}}\n      </div>\n      <div *ngIf=\"!remoteStream\" class=\"loading\">\n        <span>連線中</span>\n        <span class=\"dot-1\">.</span>\n        <span class=\"dot-2\">.</span>\n        <span class=\"dot-3\">.</span>\n      </div>\n      <video *ngIf=\"remoteStream\" class=\"remoteVideo\" #remoteVideo id=\"remoteVideo\" [srcObject]=\"remoteStream\" autoplay\n        playsinline></video>\n    </div>\n\n    <div class=\"rightSide\">\n\n      <div class=\"localVideo\">\n        <video #localVideo id=\"localVideo\" [srcObject]=\"localStream\" muted autoplay playsinline></video>\n      </div>\n\n      <div class=\"galleria\">\n        <p-galleria [value]=\"this.screenshotService.imageUrlSubject.value\"\n          [responsiveOptions]=\"galleriaResponsiveOptions\" [containerStyle]=\"{ 'margin':'auto'}\" [numVisible]=\"3\"\n          [circular]=\"true\">\n\n          <ng-template pTemplate=\"item\" let-imagePath>\n            <ng-container *ngIf=\"imagePath !== ''; else emptyItem\">\n              <img class=\"item\" *ngIf=\"imagePath !== ''\" [src]=\"imagePath\" style=\"display: block;\" />\n            </ng-container>\n\n            <ng-template #emptyItem>\n              <div class=\"empty-galleria-item\">\n                <i class=\"pi pi-image\"></i>\n              </div>\n            </ng-template>\n          </ng-template>\n\n          <ng-template pTemplate=\"thumbnail\" let-imagePath>\n            <div class=\"grid justify-center\">\n              <ng-container *ngIf=\"imagePath !== ''; else emptyThumbnail\">\n                <img class=\"thumbnail\" *ngIf=\"imagePath !== ''\" [src]=\"imagePath\" style=\"display: block;\" />\n              </ng-container>\n              <ng-template #emptyThumbnail>\n                <div class=\"empty-galleria-thumbnail\">\n                  <i class=\"pi pi-image\"></i>\n                </div>\n              </ng-template>\n            </div>\n          </ng-template>\n\n        </p-galleria>\n\n      </div>\n    </div>\n\n  </div>\n  <div class=\"buttons\">\n    <button pButton pRipple class=\"cameraBtn\" id=\"cameraBtn\" (click)=\" disableCamera()\">\n      <span class=\"material-symbols-outlined\">\n        {{videoIcon}}\n      </span>\n    </button>\n\n    <button pButton pRipple class=\"micBtn\" id=\"micBtn\" (click)=\" disableMic()\">\n      <span class=\"material-symbols-outlined\">\n        {{micIcon}}\n      </span>\n    </button>\n\n    <button pButton pRipple class=\"joinBtn\" id=\"joinBtn\" (click)=\"onShootClick()\">\n      <span class=\"material-symbols-outlined\">\n        photo_camera\n      </span>\n    </button>\n\n  </div>\n\n  <div class=\"bottom\">\n    <div class=\"hangupBtn\">\n\n      <!-- 接收端用 -->\n      <!-- <button class=\"joinBtn\" id=\"joinBtn\" [disabled]=\"show.isJoinDisabled\" (click)=\"joinRoom()\">\n        <i class=\"pi pi-user-plus\" aria-hidden=\"true\"></i>\n      </button> -->\n\n\n      <button pButton pRipple id=\"hangupBtn\" class=\"p-button-raised p-button-warning\" label=\"結束通話\"\n        [disabled]=\"show.isHangupDisabled\" (click)=\"hangUp()\">\n      </button>\n\n    </div>\n\n    <!-- 接收端用 -->\n    <!-- <p-dialog header=\"Join room\" [(visible)]=\"show.isDialog\" [modal]=\"true\" [responsive]=\"true\">\n      <div class=\"p-fluid\">\n        <div class=\"p-field\">\n          <label for=\"room-id\">Room ID</label>\n          <input id=\"room-id\" type=\"text\" pInputText [(ngModel)]=\"inputRoomId\">\n        </div>\n      </div>\n      <div class=\"p-dialog-footer\">\n        <pbutton type=\"button\" pButton [label]=\"'取消' | translate\" (click)=\"hideDialog()\"></pbutton>\n        <pbutton type=\"button\" pButton [label]=\"'加入' | translate\" (click)=\"confirmJoinRoom()\" class=\"p-button-primary\">\n        </pbutton>\n      </div>\n    </p-dialog> -->\n\n  </div>\n</div>\n","/*\n * Public API Surface of fire-video\n */\nexport * from './lib/fire-video.component';\nexport * from './lib/firebase.service';\nexport * from './lib/ice-candidate.service';\nexport * from './lib/media.service';\nexport * from './lib/connection.service';\nexport * from './lib/screenshot.service';\nexport * from './lib/show';\nexport * from './lib/sdp.interface';\nexport * from './lib/ice-server'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1"],"mappings":"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"}